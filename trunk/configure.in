dnl    This file is part of the KDE libraries/packages
dnl    Copyright (C) 2001 Stephan Kulow (coolo@kde.org)
 
dnl    This file is free software; you can redistribute it and/or
dnl    modify it under the terms of the GNU Library General Public
dnl    License as published by the Free Software Foundation; either
dnl    version 2 of the License, or (at your option) any later version.
 
dnl    This library is distributed in the hope that it will be useful,
dnl    but WITHOUT ANY WARRANTY; without even the implied warranty of
dnl    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
dnl    Library General Public License for more details.
 
dnl    You should have received a copy of the GNU Library General Public License
dnl    along with this library; see the file COPYING.LIB.  If not, write to
dnl    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
dnl    Boston, MA 02111-1307, USA.

# Original Author was Kalle@kde.org
# I lifted it in some mater. (Stephan Kulow)
# I used much code from Janos Farkas

dnl Process this file with autoconf to produce a configure script.

AC_INIT(acinclude.m4) dnl a source file from your sub dir

dnl This is so we can use kde-common
AC_CONFIG_AUX_DIR(admin)

dnl This ksh/zsh feature conflicts with `cd blah ; pwd`
unset CDPATH

dnl Checking host/target/build systems, for make, install etc.
AC_CANONICAL_SYSTEM 
dnl Perform program name transformation
AC_ARG_PROGRAM

dnl Automake doc recommends to do this only here. (Janos)
AM_INIT_AUTOMAKE(k2send, 0.1) dnl searches for some needed programs

KDE_SET_PREFIX

dnl generate the config header
AM_CONFIG_HEADER(config.h) dnl at the distribution this done

dnl Checks for programs.
AC_CHECK_COMPILERS
AC_ENABLE_SHARED(yes)
AC_ENABLE_STATIC(no)
KDE_PROG_LIBTOOL

dnl for NLS support. Call them in this order!
dnl WITH_NLS is for the po files
AM_KDE_WITH_NLS

KDE_USE_QT(3.0.0)
AC_PATH_KDE
#MIN_CONFIG(3.0.0)

dnl PACKAGE set before
AC_C_BIGENDIAN
AC_CHECK_KDEMAXPATHLEN



# Configure paths for libbluetooth
# Edd Dumbill <edd@usefulinc.com>
# Shamelessly stolen from Jack Moffitt, who stole
# it from Owen Taylor and Manish Singh

# Modified by Simone Gotti for kde-bluetooth on 2003-10-04


dnl Test for libbluetooth, and define BLUETOOTH_CFLAGS and BLUETOOTH_LIBS
dnl

dnl
dnl Get the cflags and libraries
dnl
AC_ARG_WITH(bluetooth,[  --with-bluetooth=PFX   Prefix where libbluetooth is installed (optional)], bluetooth_prefix="$withval", bluetooth_prefix="")
AC_ARG_WITH(bluetooth-libraries,[  --with-bluetooth-libraries=DIR   Directory where libbluetooth library is installed (optional)], bluetooth_libraries="$withval", bluetooth_libraries="")
AC_ARG_WITH(bluetooth-includes,[  --with-bluetooth-includes=DIR   Directory where libbluetooth header files are installed (optional)], bluetooth_includes="$withval", bluetooth_includes="")
AC_ARG_ENABLE(bluetoothtest, [  --disable-bluetoothtest       Do not try to compile and run a test Bluetooth program],, enable_bluetoothtest=yes)

  if test "x$bluetooth_libraries" != "x" ; then
    BLUETOOTH_LIBS="-L$bluetooth_libraries"
  elif test "x$bluetooth_prefix" != "x" ; then
    BLUETOOTH_LIBS="-L$bluetooth_prefix/lib"
  elif test "x$prefix" != "xNONE" ; then
    BLUETOOTH_LIBS="-L$prefix/lib"
  fi

  BLUETOOTH_LIBS="$BLUETOOTH_LIBS -lbluetooth"

  if test "x$bluetooth_includes" != "x" ; then
    BLUETOOTH_CFLAGS="-I$bluetooth_includes"
  elif test "x$bluetooth_prefix" != "x" ; then
    BLUETOOTH_CFLAGS="-I$bluetooth_prefix/include"
  elif test "$prefix" != "xNONE"; then
    BLUETOOTH_CFLAGS="-I$prefix/include"
  fi

  AC_MSG_CHECKING(for libbluetooth)
  no_bluetooth=""


  if test "x$enable_bluetoothtest" = "xyes" ; then
    ac_save_CFLAGS="$CFLAGS"
    ac_save_LIBS="$LIBS"
    CFLAGS="$BLUETOOTH_CFLAGS"
    LIBS="$LIBS $BLUETOOTH_LIBS"
dnl
dnl Now check if the installed Bluetooth is sufficiently new.
dnl
      rm -f conf.bluetoothtest
      AC_TRY_RUN([
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <bluetooth/bluetooth.h>

int main ()
{
  bdaddr_t bdaddr;

  str2ba("00:00:00:11:11:11", &bdaddr);
  system("touch conf.bluetoothtest");
  return 0;
}

],, no_bluetooth=yes,[echo $ac_n "cross compiling; assumed OK... $ac_c"])
       CFLAGS="$ac_save_CFLAGS"
       LIBS="$ac_save_LIBS"
  fi

  if test "x$no_bluetooth" = "x" ; then
     AC_MSG_RESULT(yes)
     ifelse([$1], , :, [$1])
  else
     AC_MSG_RESULT(no)
     if test -f conf.bluetoothtest ; then
       :
     else
       echo "*** Could not run libluetooth test program, checking why..."
       CFLAGS="$CFLAGS $BLUETOOTH_CFLAGS"
       LIBS="$LIBS $BLUETOOTH_LIBS"
       AC_TRY_LINK([
#include <stdio.h>
#include <bluetooth/bluetooth.h>
],     [],
       [ echo "*** The test program compiled, but did not run. This usually means"
       echo "*** that the run-time linker is not finding libbluetooth or finding the wrong"
       echo "*** version of libbluetooth. If it is not finding libbluetooth, you'll need to set your"
       echo "*** LD_LIBRARY_PATH environment variable, or edit /etc/ld.so.conf to point"
       echo "*** to the installed location  Also, make sure you have run ldconfig if that"
       echo "*** is required on your system"
       echo "***"
       echo "*** If you have an old version installed, it is best to remove it, although"
       echo "*** you may also be able to get things to work by modifying LD_LIBRARY_PATH"],
       [ echo "*** The test program failed to compile or link. See the file config.log for the"
       echo "*** exact error that occurred. This usually means libbluetooth was incorrectly installed"
       echo "*** or that you have moved libbluetooth since it was installed." ])
       CFLAGS="$ac_save_CFLAGS"
       LIBS="$ac_save_LIBS"
     fi
     BLUETOOTH_CFLAGS=""
     BLUETOOTH_LIBS=""
     ifelse([$2], , :, [$2])
  fi
  AC_SUBST(BLUETOOTH_CFLAGS)
  AC_SUBST(BLUETOOTH_LIBS)
  rm -f conf.bluetoothtest

if test "$no_bluetooth" = "yes" ; then
        AC_MSG_WARN(libbluetooth is required to build k2send - part of bluez-libs)
        DO_NOT_COMPILE="$DO_NOT_COMPILE k2send"
fi


CXXFLAGS="$CXXFLAGS $KDE_DEFAULT_CXXFLAGS"

# stolen from amarok configure.in.in

TAGLIB_REQ_VERSION="0.95";
TAGLIB_URL="http://ktown.kde.org/~wheeler/taglib/";
AC_DEFUN([VERSION_TO_NUMBER], [`$1 | awk 'BEGIN { FS = "."; } { printf "%d",  ([$]1* 1000 + [$]2) * 1000 + [$]3;}'`])

AC_PATH_PROG(TAGLIB_CONFIG, taglib-config, no)

if test "x$TAGLIB_CONFIG" = "xno" ; then
    k2send_error_notaglib=yes
    DO_NOT_COMPILE="$DO_NOT_COMPILE k2send"
    no_k2send=yes
else
    AC_DEFINE(HAVE_TAGLIB, 1, [have TagLib])
    taglib_includes=[`$TAGLIB_CONFIG --cflags`]
    taglib_libs=[`$TAGLIB_CONFIG --libs`]
    taglib_version=[`$TAGLIB_CONFIG --version`]

    if test VERSION_TO_NUMBER(echo $taglib_version) -lt VERSION_TO_NUMBER(echo $TAGLIB_REQ_VERSION); then
        k2send_error_taglibold=yes
        DO_NOT_COMPILE="$DO_NOT_COMPILE k2send"
        no_k2send=yes
    fi
fi

LIBS="$LIBS $taglib_libs $BLUETOOTH_LIBS "
CXXFLAGS="$CXXFLAGS $taglib_includes "

#AC_SUBST(taglib_includes)
#AC_SUBST(taglib_libs)

AC_MSG_RESULT(yes)



KDE_CREATE_SUBDIRSLIST
AC_CONFIG_FILES([ Makefile ])
AC_CONFIG_FILES([ doc/Makefile ])
AC_CONFIG_FILES([ doc/en/Makefile ])
AC_CONFIG_FILES([ po/Makefile ])
AC_CONFIG_FILES([ src/Makefile ])
AC_OUTPUT
if test "$all_tests" = "bad"; then
  if test ! "$cache_file" = "/dev/null"; then
    echo ""    
    echo "Please remove the file $cache_file after changing your setup"
    echo "so that configure will find the changes next time."
    echo ""
  fi
else
  echo ""
  echo "Good - your configure finished. Start make now"
  echo ""
fi
